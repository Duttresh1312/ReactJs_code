const redux = require('redux');
const reduxLogger = require('redux-logger');
const applyMiddleware = redux.applyMiddleware
const createStore = redux.createStore;
const combineReducers = redux.combineReducers;
const logger = reduxLogger.createLogger() 

const BUY_CAKE = 'BUY_CAKE';
const BUY_ICECREAM = 'BUY_ICECREAM';

function buycake() {
    return {
        type: BUY_CAKE,
        info: 'First redux action'
    }
}

function buyIcecream() {
    return {
        type: BUY_ICECREAM,
    }
}

const initialcakeState = {
    numofCakes: 10
}

const initialicecreamState = {
    numofIcecream: 20
}

const cakereducer = (state = initialcakeState, action) => {
    switch (action.type) {
        case BUY_CAKE: return {
            ...state,
            numofCakes: state.numofCakes - 1
        }

        default: return state
    }
}

const iceCreamreducer = (state = initialicecreamState, action) => {
    switch (action.type) {
        case BUY_ICECREAM: return {
            ...state,
            numofIcecream: state.numofIcecream - 1
        }

        default: return state
    }
}

const rootReducer = combineReducers({
    cake: cakereducer,
    icecream: iceCreamreducer
})

const store = createStore(rootReducer, applyMiddleware(logger))
console.log('Initial state', store.getState());
const unsubscribe = store.subscribe(() => {});
store.dispatch(buycake())
store.dispatch(buycake())
store.dispatch(buycake())
store.dispatch(buyIcecream())
store.dispatch(buyIcecream())
unsubscribe();